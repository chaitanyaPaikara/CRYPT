KCPSM6 Assembler log file for program 'F:\RESEARCH\vlsid_2015\APUF_Cliassic\MacroDesign\APUF_Classic_128\src\verilog\picoBlaze6\assembler\program.psm'.
Generated by KCPSM6 version v2.70
Ken Chapman - Xilinx Ltd - 16th May 2014

Assembly datestamp: 31 Dec 2014
Assembly timestamp: 13:03:00

Contents
  Assembly listing
  List of PSM files
  List of CONSTANTs
  List of TABLEs
  List of STRINGs
  List of line labels
  Instruction usage statistics


Last occupied address: 0AE hex
Nominal program memory size: 1K (1024)   address(9:0)
Actual memory size: 4096
  (Default memory size)
Occupied memory locations: 175
Memory locations available: 3921


Assembly listing

 Addr Code                      Instruction

 000                            ;*********************************************************************************************
 000                            ; Author      : D P Sahoo
 000                            ; Email       : dpsahoo.cs@gmail.com
 000                            ; Date        : 23.08.2014
 000                            ; Last Update : 23.08.2014
 000                            ;*********************************************************************************************
 000                            ; Description: This will be executed by picoBlaze microcontroller.
 000                            ; It will apply challenges to PUF cuircuit and works as controller
 000                            ; to PUF, and finally receive response to transfer to PC.
 000                            ;
 000                            ;*********************************************************************************************
 000                            ;
 000                            ; Define Constants
 000                            ;*********************************************************************************************
 000                            ; RS232 port's status
 000                            CONSTANT tx_half_full, 01                ;  Transmitter half full - bit0
 000                            CONSTANT tx_full, 02                     ;  FIFO full    - bit1
 000                            CONSTANT rx_half_full, 04                ;  Receiver half full  - bit2
 000                            CONSTANT rx_full, 08                     ;  FIFO full    - bit3
 000                            CONSTANT rx_data_present, 10             ;  data present    - bit4
 000                            ;
 000                            ; Output ports (8-bits)
 000                            ;*********************************************************************************************
 000                            CONSTANT CHAL_1_PORT_O, 00               ;
 000                            CONSTANT CHAL_2_PORT_O, 01               ;
 000                            CONSTANT CHAL_3_PORT_O, 02               ;
 000                            CONSTANT CHAL_4_PORT_O, 03               ;
 000                            CONSTANT CHAL_5_PORT_O, 04               ;
 000                            CONSTANT CHAL_6_PORT_O, 05               ;
 000                            CONSTANT CHAL_7_PORT_O, 06               ;
 000                            CONSTANT CHAL_8_PORT_O, 07               ;
 000                            CONSTANT CHAL_9_PORT_O, 08               ;
 000                            CONSTANT CHAL_10_PORT_O, 09              ;
 000                            CONSTANT CHAL_11_PORT_O, 0A              ;
 000                            CONSTANT CHAL_12_PORT_O, 0B              ;
 000                            CONSTANT CHAL_13_PORT_O, 0C              ;
 000                            CONSTANT CHAL_14_PORT_O, 0D              ;
 000                            CONSTANT CHAL_15_PORT_O, 0E              ;
 000                            CONSTANT CHAL_16_PORT_O, 0F              ;
 000                            CONSTANT CHAL_EN_PORT_O, 10              ;
 000                            CONSTANT UART_Tx_PORT_O, 11              ;
 000                            CONSTANT PUF_START_PORT_O, 12            ;
 000                            ;
 000                            ; Input ports (8-bit)
 000                            ;*********************************************************************************************
 000                            CONSTANT UART_STATUS_PORT_I, 00          ;
 000                            CONSTANT UART_Rx_PORT_I, 01              ;
 000                            CONSTANT RESP_READY_PORT_I, 02           ;
 000                            CONSTANT RESP_1_PORT_I, 03               ;
 000                            CONSTANT RESP_2_PORT_I, 04               ;
 000                            CONSTANT RESP_3_PORT_I, 05               ;
 000                            CONSTANT RESP_4_PORT_I, 06               ;
 000                            CONSTANT RESP_5_PORT_I, 07               ;
 000                            CONSTANT RESP_6_PORT_I, 08               ;
 000                            CONSTANT RESP_7_PORT_I, 09               ;
 000                            CONSTANT RESP_8_PORT_I, 0A               ;
 000                            CONSTANT RESP_9_PORT_I, 0B               ;
 000                            CONSTANT RESP_10_PORT_I, 0C              ;
 000                            CONSTANT RESP_11_PORT_I, 0D              ;
 000                            CONSTANT RESP_12_PORT_I, 0E              ;
 000                            CONSTANT RESP_13_PORT_I, 0F              ;
 000                            CONSTANT RESP_14_PORT_I, 10              ;
 000                            CONSTANT RESP_15_PORT_I, 11              ;
 000                            CONSTANT RESP_16_PORT_I, 12              ;
 000                            ;
 000                            ; Scratchpad memory addresses to store  challenge.
 000                            ;*********************************************************************************************
 000                            CONSTANT CHAL_1, 00                      ;
 000                            CONSTANT CHAL_2, 01                      ;
 000                            CONSTANT CHAL_3, 02                      ;
 000                            CONSTANT CHAL_4, 03                      ;
 000                            CONSTANT CHAL_5, 04                      ;
 000                            CONSTANT CHAL_6, 05                      ;
 000                            CONSTANT CHAL_7, 06                      ;
 000                            CONSTANT CHAL_8, 07                      ;
 000                            CONSTANT CHAL_9, 08                      ;
 000                            CONSTANT CHAL_10, 09                     ;
 000                            CONSTANT CHAL_11, 0A                     ;
 000                            CONSTANT CHAL_12, 0B                     ;
 000                            CONSTANT CHAL_13, 0C                     ;
 000                            CONSTANT CHAL_14, 0D                     ;
 000                            CONSTANT CHAL_15, 0E                     ;
 000                            CONSTANT CHAL_16, 0F                     ;
 000                            ;
 000                            ; Commands [PC <=> PICO]
 000                            ;*********************************************************************************************
 000                            CONSTANT CHAR_C, 43                      ; Prepare to receive challenges. (PC -> PICO)
 000                            CONSTANT CHAR_V, 56                      ; Send the received challenges. (PC -> PICO)
 000                            CONSTANT CHAR_B, 42                      ; Next Bytes are received challenges. (PICO -> PC)
 000                            CONSTANT CHAR_R, 52                      ; Response Ready and Next two bytes are responses (PICO -> PC)
 000                            CONSTANT CHAR_S, 53                      ; Start PUF evaluation. (PC -> PICO)
 000                            CONSTANT CHAR_Q, 51                      ; Reply of command S.
 000                            CONSTANT CHAR_N, 4E                      ; Received responses are not same. Resend responses. (PC -> PICO)
 000                            CONSTANT CHAR_A, 41                      ; To check whether connection is active or not. (PC -> PICO)
 000                            CONSTANT CHAR_Y, 59                      ; response of command A. Y = Yes (PICO -> PC)
 000                            CONSTANT CHAR_W, 57                      ; Wait for response (PC -> PICO)
 000                            CONSTANT CHAR_E, 45                      ; reply: Evaluation has not finished yet.
 000                            CONSTANT CHAR_F, 46                      ; reply: Evaluation finished.
 000                            ;
 000                            ; Renamed registers
 000                            ;*********************************************************************************************
 000                            NAMEREG sF, UART_data                    ; used to pass data to and from the UART
 000                            NAMEREG sE, RESP_data                    ; used to store response
 000                            ; Actions
 000                            ;*********************************************************************************************
 000                     START: 
 000                            ;*********************************************************************************************
 000           welcome_to_pico: 
 000                            ;*********************************************************************************************
 000  01F68                     LOAD sF[UART_data], 68[character_h]
 001  20021                     CALL 021[write_character]
 002  01F65                     LOAD sF[UART_data], 65[character_e]
 003  20021                     CALL 021[write_character]
 004  01F6C                     LOAD sF[UART_data], 6C[character_l]
 005  20021                     CALL 021[write_character]
 006  01F6C                     LOAD sF[UART_data], 6C[character_l]
 007  20021                     CALL 021[write_character]
 008  01F6F                     LOAD sF[UART_data], 6F[character_o]
 009  20021                     CALL 021[write_character]
 00A                            ;*********************************************************************************************
 00A              COMMAND_Loop: 
 00A                            ;*********************************************************************************************
 00A  09000                     INPUT s0, 00[UART_STATUS_PORT_I]
 00B  0D010                     TEST s0, 10[rx_data_present]
 00C  3200A                     JUMP Z, 00A[COMMAND_Loop]
 00D  09F01                     INPUT sF[UART_data], 01[UART_Rx_PORT_I]
 00E  1DF41                     COMPARE sF[UART_data], 41[CHAR_A]        ; Are you active ? [PICO <- PC]
 00F  32019                     JUMP Z, 019[send_reply]
 010  1DF43                     COMPARE sF[UART_data], 43[CHAR_C]        ; Read challenge  [PICO <- PC]
 011  32026                     JUMP Z, 026[read_challenge]
 012  1DF56                     COMPARE sF[UART_data], 56[character_V]   ; Send received challenge [PICO <- PC]
 013  32047                     JUMP Z, 047[send_challenge]
 014  1DF53                     COMPARE sF[UART_data], 53[CHAR_S]        ; Start PUF evaluation [PICO <- PC]
 015  3206A                     JUMP Z, 06A[evaluate_PUF]
 016  1DF57                     COMPARE sF[UART_data], 57[CHAR_W]        ; Waiting for response [PICO <- PC]
 017  32093                     JUMP Z, 093[check_resp_status]
 018                            ;COMPARE UART_data, CHAR_N         ; Resend response [PICO <- PC]
 018                            ;JUMP  Z, resend_response
 018  2200A                     JUMP 00A[COMMAND_Loop]
 019                            ;*********************************************************************************************
 019                            ; For connection reachability
 019                send_reply: 
 019                            ;*********************************************************************************************
 019                            ;INPUT UART_data, UART_Rx_PORT_I
 019                            ;CALL   write_character
 019  01F59                     LOAD sF[UART_data], 59[character_Y]
 01A  20021                     CALL 021[write_character]
 01B                            ;CALL  test_v_msg
 01B                            ;LOAD UART_data, character_E
 01B                            ;CALL   write_character
 01B                            ;LOAD UART_data, character_S
 01B                            ;CALL   write_character
 01B  2200A                     JUMP 00A[COMMAND_Loop]
 01C                            ;*********************************************************************************************
 01C            read_character: ;Read a character from UART_Rx
 01C                            ;*********************************************************************************************
 01C  09000                     INPUT s0, 00[UART_STATUS_PORT_I]
 01D  0D010                     TEST s0, 10[rx_data_present]
 01E  3201C                     JUMP Z, 01C[read_character]
 01F  09F01                     INPUT sF[UART_data], 01[UART_Rx_PORT_I]  ;read from FIFO
 020  25000                     RETURN 
 021                            ;*********************************************************************************************
 021           write_character: ; Write a character to UART_Tx
 021                            ;*********************************************************************************************
 021  09000                     INPUT s0, 00[UART_STATUS_PORT_I]
 022  0D002                     TEST s0, 02[tx_full]
 023  36021                     JUMP NZ, 021[write_character]
 024  2DF11                     OUTPUT sF[UART_data], 11[UART_Tx_PORT_O]
 025  25000                     RETURN 
 026                            ;*********************************************************************************************
 026            read_challenge: ; Read Challenge bytes from PC and
 026                            ;store in scratchpad memory
 026                            ;*********************************************************************************************
 026  2001C                     CALL 01C[read_character]
 027  2FF00                     STORE sF[UART_data], 00[CHAL_1]          ; Least significant byte of multi-byte data
 028  2001C                     CALL 01C[read_character]
 029  2FF01                     STORE sF[UART_data], 01[CHAL_2]
 02A  2001C                     CALL 01C[read_character]
 02B  2FF02                     STORE sF[UART_data], 02[CHAL_3]
 02C  2001C                     CALL 01C[read_character]
 02D  2FF03                     STORE sF[UART_data], 03[CHAL_4]
 02E  2001C                     CALL 01C[read_character]
 02F  2FF04                     STORE sF[UART_data], 04[CHAL_5]
 030  2001C                     CALL 01C[read_character]
 031  2FF05                     STORE sF[UART_data], 05[CHAL_6]
 032  2001C                     CALL 01C[read_character]
 033  2FF06                     STORE sF[UART_data], 06[CHAL_7]
 034  2001C                     CALL 01C[read_character]
 035  2FF07                     STORE sF[UART_data], 07[CHAL_8]
 036  2001C                     CALL 01C[read_character]
 037  2FF08                     STORE sF[UART_data], 08[CHAL_9]
 038  2001C                     CALL 01C[read_character]
 039  2FF09                     STORE sF[UART_data], 09[CHAL_10]
 03A  2001C                     CALL 01C[read_character]
 03B  2FF0A                     STORE sF[UART_data], 0A[CHAL_11]
 03C  2001C                     CALL 01C[read_character]
 03D  2FF0B                     STORE sF[UART_data], 0B[CHAL_12]
 03E  2001C                     CALL 01C[read_character]
 03F  2FF0C                     STORE sF[UART_data], 0C[CHAL_13]
 040  2001C                     CALL 01C[read_character]
 041  2FF0D                     STORE sF[UART_data], 0D[CHAL_14]
 042  2001C                     CALL 01C[read_character]
 043  2FF0E                     STORE sF[UART_data], 0E[CHAL_15]
 044  2001C                     CALL 01C[read_character]
 045  2FF0F                     STORE sF[UART_data], 0F[CHAL_16]
 046  2200A                     JUMP 00A[COMMAND_Loop]
 047                            ;*********************************************************************************************
 047                            ;Service Routine for command V
 047            send_challenge: ; send 8 byte challenges to PC
 047                            ;*********************************************************************************************
 047  01F42                     LOAD sF[UART_data], 42[character_B]      ; tells host(PC) application that next bytes are challenges.
 048  20021                     CALL 021[write_character]
 049  0BF0F                     FETCH sF[UART_data], 0F[CHAL_16]         ; First byte in Matlab challenge[1] vector
 04A  20021                     CALL 021[write_character]
 04B  0BF0E                     FETCH sF[UART_data], 0E[CHAL_15]
 04C  20021                     CALL 021[write_character]
 04D  0BF0D                     FETCH sF[UART_data], 0D[CHAL_14]
 04E  20021                     CALL 021[write_character]
 04F  0BF0C                     FETCH sF[UART_data], 0C[CHAL_13]
 050  20021                     CALL 021[write_character]
 051  0BF0B                     FETCH sF[UART_data], 0B[CHAL_12]
 052  20021                     CALL 021[write_character]
 053  0BF0A                     FETCH sF[UART_data], 0A[CHAL_11]
 054  20021                     CALL 021[write_character]
 055  0BF09                     FETCH sF[UART_data], 09[CHAL_10]
 056  20021                     CALL 021[write_character]
 057  0BF08                     FETCH sF[UART_data], 08[CHAL_9]
 058  20021                     CALL 021[write_character]
 059  0BF07                     FETCH sF[UART_data], 07[CHAL_8]
 05A  20021                     CALL 021[write_character]
 05B  0BF06                     FETCH sF[UART_data], 06[CHAL_7]
 05C  20021                     CALL 021[write_character]
 05D  0BF05                     FETCH sF[UART_data], 05[CHAL_6]
 05E  20021                     CALL 021[write_character]
 05F  0BF04                     FETCH sF[UART_data], 04[CHAL_5]
 060  20021                     CALL 021[write_character]
 061  0BF03                     FETCH sF[UART_data], 03[CHAL_4]
 062  20021                     CALL 021[write_character]
 063  0BF02                     FETCH sF[UART_data], 02[CHAL_3]
 064  20021                     CALL 021[write_character]
 065  0BF01                     FETCH sF[UART_data], 01[CHAL_2]
 066  20021                     CALL 021[write_character]
 067  0BF00                     FETCH sF[UART_data], 00[CHAL_1]
 068  20021                     CALL 021[write_character]
 069  2200A                     JUMP 00A[COMMAND_Loop]
 06A                            ;*********************************************************************************************
 06A                            ;Service Routine for command S
 06A                            ;Apply challenge to PUF and wait for response
 06A              evaluate_PUF: ;[controlling PUF activities]
 06A                            ;*********************************************************************************************
 06A  01000                     LOAD s0, 00                              ; set PUF_START (For APUF it is Trigger_sig) signal to LOW.
 06B  2D012                     OUTPUT s0, 12[PUF_START_PORT_O]
 06C  0B000                     FETCH s0, 00[CHAL_1]
 06D  2D000                     OUTPUT s0, 00[CHAL_1_PORT_O]
 06E  0B001                     FETCH s0, 01[CHAL_2]
 06F  2D001                     OUTPUT s0, 01[CHAL_2_PORT_O]
 070  0B002                     FETCH s0, 02[CHAL_3]
 071  2D002                     OUTPUT s0, 02[CHAL_3_PORT_O]
 072  0B003                     FETCH s0, 03[CHAL_4]
 073  2D003                     OUTPUT s0, 03[CHAL_4_PORT_O]
 074  0B004                     FETCH s0, 04[CHAL_5]
 075  2D004                     OUTPUT s0, 04[CHAL_5_PORT_O]
 076  0B005                     FETCH s0, 05[CHAL_6]
 077  2D005                     OUTPUT s0, 05[CHAL_6_PORT_O]
 078  0B006                     FETCH s0, 06[CHAL_7]
 079  2D006                     OUTPUT s0, 06[CHAL_7_PORT_O]
 07A  0B007                     FETCH s0, 07[CHAL_8]
 07B  2D007                     OUTPUT s0, 07[CHAL_8_PORT_O]
 07C  0B008                     FETCH s0, 08[CHAL_9]
 07D  2D008                     OUTPUT s0, 08[CHAL_9_PORT_O]
 07E  0B009                     FETCH s0, 09[CHAL_10]
 07F  2D009                     OUTPUT s0, 09[CHAL_10_PORT_O]
 080  0B00A                     FETCH s0, 0A[CHAL_11]
 081  2D00A                     OUTPUT s0, 0A[CHAL_11_PORT_O]
 082  0B00B                     FETCH s0, 0B[CHAL_12]
 083  2D00B                     OUTPUT s0, 0B[CHAL_12_PORT_O]
 084  0B00C                     FETCH s0, 0C[CHAL_13]
 085  2D00C                     OUTPUT s0, 0C[CHAL_13_PORT_O]
 086  0B00D                     FETCH s0, 0D[CHAL_14]
 087  2D00D                     OUTPUT s0, 0D[CHAL_14_PORT_O]
 088  0B00E                     FETCH s0, 0E[CHAL_15]
 089  2D00E                     OUTPUT s0, 0E[CHAL_15_PORT_O]
 08A  0B00F                     FETCH s0, 0F[CHAL_16]
 08B  2D00F                     OUTPUT s0, 0F[CHAL_16_PORT_O]
 08C  010FF                     LOAD s0, FF
 08D  200A1                     CALL 0A1[delay]
 08E  01001                     LOAD s0, 01                              ; set PUF_START (Actually it is RO enable) signal to HIGH and Keep it HIGH.
 08F  2D012                     OUTPUT s0, 12[PUF_START_PORT_O]
 090  01F51                     LOAD sF[UART_data], 51[CHAR_Q]           ; PUF starts working.
 091  20021                     CALL 021[write_character]
 092  2200A                     JUMP 00A[COMMAND_Loop]
 093                            ;*********************************************************************************************
 093                            ; Check response status
 093         check_resp_status: 
 093                            ;*********************************************************************************************
 093  09002                     INPUT s0, 02[RESP_READY_PORT_I]
 094  1D001                     COMPARE s0, 01
 095  32099                     JUMP Z, 099[send_response]
 096  01F45                     LOAD sF[UART_data], 45[CHAR_E]
 097  20021                     CALL 021[write_character]
 098  2200A                     JUMP 00A[COMMAND_Loop]
 099                            ;*********************************************************************************************
 099                            ;Send response routine
 099             send_response: 
 099                            ;*********************************************************************************************
 099  01F46                     LOAD sF[UART_data], 46[CHAR_F]
 09A  20021                     CALL 021[write_character]                ; send response ready command to host(PC) application
 09B                            ;INPUT  RESP_data, RESP_16_PORT_I   ; send PUF response to host(PC) application
 09B                            ;LOAD   UART_data, RESP_data
 09B                            ;CALL   write_character
 09B                            ;INPUT  RESP_data, RESP_15_PORT_I
 09B                            ;LOAD   UART_data, RESP_data
 09B                            ;CALL   write_character
 09B                            ;INPUT  RESP_data, RESP_14_PORT_I
 09B                            ;LOAD   UART_data, RESP_data
 09B                            ;CALL   write_character
 09B                            ;INPUT  RESP_data, RESP_13_PORT_I
 09B                            ;LOAD   UART_data, RESP_data
 09B                            ;CALL   write_character
 09B                            ;INPUT  RESP_data, RESP_12_PORT_I
 09B                            ;LOAD   UART_data, RESP_data
 09B                            ;CALL   write_character
 09B                            ;INPUT  RESP_data, RESP_11_PORT_I
 09B                            ;LOAD   UART_data, RESP_data
 09B                            ;CALL   write_character
 09B                            ;INPUT  RESP_data, RESP_10_PORT_I
 09B                            ;LOAD   UART_data, RESP_data
 09B                            ;CALL   write_character
 09B                            ;INPUT  RESP_data, RESP_9_PORT_I
 09B                            ;LOAD   UART_data, RESP_data
 09B                            ;CALL   write_character
 09B                            ;INPUT  RESP_data, RESP_8_PORT_I
 09B                            ;LOAD   UART_data, RESP_data
 09B                            ;CALL   write_character
 09B                            ;INPUT  RESP_data, RESP_7_PORT_I
 09B                            ;LOAD   UART_data, RESP_data
 09B                            ;CALL   write_character
 09B                            ;INPUT  RESP_data, RESP_6_PORT_I
 09B                            ;LOAD   UART_data, RESP_data
 09B                            ;CALL   write_character
 09B                            ;INPUT  RESP_data, RESP_5_PORT_I
 09B                            ;LOAD   UART_data, RESP_data
 09B                            ;CALL   write_character
 09B                            ;INPUT  RESP_data, RESP_4_PORT_I
 09B                            ;LOAD   UART_data, RESP_data
 09B                            ;CALL   write_character
 09B                            ;INPUT  RESP_data, RESP_3_PORT_I
 09B                            ;LOAD   UART_data, RESP_data
 09B                            ;CALL   write_character
 09B                            ;INPUT  RESP_data, RESP_2_PORT_I
 09B                            ;LOAD   UART_data, RESP_data
 09B                            ;CALL   write_character
 09B  010FF                     LOAD s0, FF
 09C  200A1                     CALL 0A1[delay]
 09D  09E03                     INPUT sE[RESP_data], 03[RESP_1_PORT_I]
 09E  00FE0                     LOAD sF[UART_data], sE[RESP_data]
 09F  20021                     CALL 021[write_character]
 0A0                            ;CALL   write_character            ; send PUF same response to host(PC) application.
 0A0                            ;LOAD   s0, 00                     ; set challenge_enable to LOW
 0A0                            ;OUTPUT s0, CHAL_EN_PORT_O
 0A0  2200A                     JUMP 00A[COMMAND_Loop]
 0A1                            ;*********************************************************************************************
 0A1                            ;Delay Routine
 0A1                     delay: 
 0A1                            ;Put no. of NOP operation you want inside
 0A1                            ;delay routine in register s0.
 0A1                            ;*********************************************************************************************
 0A1  1D000                     COMPARE s0, 00
 0A2  31000                     RETURN Z
 0A3  00000                     LOAD s0, s0                              ; NOP operation
 0A4  19001                     SUB s0, 01
 0A5  220A1                     JUMP 0A1[delay]
 0A6                            ;*********************************************************************************************
 0A6                            ; Test message [to verify rechability]
 0A6                test_v_msg: 
 0A6                            ;*********************************************************************************************
 0A6  01F54                     LOAD sF[UART_data], 54[character_T]
 0A7  20021                     CALL 021[write_character]
 0A8  01F45                     LOAD sF[UART_data], 45[character_E]
 0A9  20021                     CALL 021[write_character]
 0AA  01F53                     LOAD sF[UART_data], 53[character_S]
 0AB  20021                     CALL 021[write_character]
 0AC  01F54                     LOAD sF[UART_data], 54[character_T]
 0AD  20021                     CALL 021[write_character]
 0AE  25000                     RETURN 
 0AF                            ; ASCII table
 0AF                            ;*********************************************************************************************
 0AF                            CONSTANT character_a, 61
 0AF                            CONSTANT character_b, 62
 0AF                            CONSTANT character_c, 63
 0AF                            CONSTANT character_d, 64
 0AF                            CONSTANT character_e, 65
 0AF                            CONSTANT character_f, 66
 0AF                            CONSTANT character_g, 67
 0AF                            CONSTANT character_h, 68
 0AF                            CONSTANT character_i, 69
 0AF                            CONSTANT character_j, 6A
 0AF                            CONSTANT character_k, 6B
 0AF                            CONSTANT character_l, 6C
 0AF                            CONSTANT character_m, 6D
 0AF                            CONSTANT character_n, 6E
 0AF                            CONSTANT character_o, 6F
 0AF                            CONSTANT character_p, 70
 0AF                            CONSTANT character_q, 71
 0AF                            CONSTANT character_r, 72
 0AF                            CONSTANT character_s, 73
 0AF                            CONSTANT character_t, 74
 0AF                            CONSTANT character_u, 75
 0AF                            CONSTANT character_v, 76
 0AF                            CONSTANT character_w, 77
 0AF                            CONSTANT character_x, 78
 0AF                            CONSTANT character_y, 79
 0AF                            CONSTANT character_z, 7A
 0AF                            CONSTANT character_A, 41
 0AF                            CONSTANT character_B, 42
 0AF                            CONSTANT character_C, 43
 0AF                            CONSTANT character_D, 44
 0AF                            CONSTANT character_E, 45
 0AF                            CONSTANT character_F, 46
 0AF                            CONSTANT character_G, 47
 0AF                            CONSTANT character_H, 48
 0AF                            CONSTANT character_I, 49
 0AF                            CONSTANT character_J, 4A
 0AF                            CONSTANT character_K, 4B
 0AF                            CONSTANT character_L, 4C
 0AF                            CONSTANT character_M, 4D
 0AF                            CONSTANT character_N, 4E
 0AF                            CONSTANT character_O, 4F
 0AF                            CONSTANT character_P, 50
 0AF                            CONSTANT character_Q, 51
 0AF                            CONSTANT character_R, 52
 0AF                            CONSTANT character_S, 53
 0AF                            CONSTANT character_T, 54
 0AF                            CONSTANT character_U, 55
 0AF                            CONSTANT character_V, 56
 0AF                            CONSTANT character_W, 57
 0AF                            CONSTANT character_X, 58
 0AF                            CONSTANT character_Y, 59
 0AF                            CONSTANT character_Z, 5A
 0AF                            CONSTANT character_0, 30
 0AF                            CONSTANT character_1, 31
 0AF                            CONSTANT character_2, 32
 0AF                            CONSTANT character_3, 33
 0AF                            CONSTANT character_4, 34
 0AF                            CONSTANT character_5, 35
 0AF                            CONSTANT character_6, 36
 0AF                            CONSTANT character_7, 37
 0AF                            CONSTANT character_8, 38
 0AF                            CONSTANT character_9, 39
 0AF                            CONSTANT character_colon, 3A
 0AF                            CONSTANT character_semi_colon, 3B
 0AF                            CONSTANT character_less_than, 3C
 0AF                            CONSTANT character_greater_than, 3E
 0AF                            CONSTANT character_equals, 3D
 0AF                            CONSTANT character_space, 20
 0AF                            CONSTANT character_CR, 0D                ;carriage return
 0AF                            CONSTANT character_question, 3F          ;'?'
 0AF                            CONSTANT character_dollar, 24
 0AF                            CONSTANT character_BS, 08                ;Back Space command character
 0AF                            ;********************************* END ************************************************


All unused memory locations contain zero (equivalent to 'LOAD s0, s0')



List of PSM files that have been assembled

F:\RESEARCH\vlsid_2015\APUF_Cliassic\MacroDesign\APUF_Classic_128\src\verilog\picoBlaze6\assembler\program.psm



List of defined constants

 CONSTANT name          Value        Source PSM File

 timestamp_hours        13'd         
 timestamp_minutes      03'd         
 timestamp_seconds      00'd         
 datestamp_year         14'd         
 datestamp_month        12'd         
 datestamp_day          31'd         
 NUL                    00           
 BEL                    07           
 BS                     08           
 HT                     09           
 LF                     0A           
 VT                     0B           
 CR                     0D           
 ESC                    1B           
 DEL                    7F           
 DCS                    90           
 ST                     9C           
 tx_half_full           01           program.psm
 tx_full                02           program.psm
 rx_half_full           04           program.psm
 rx_full                08           program.psm
 rx_data_present        10           program.psm
 CHAL_1_PORT_O          00           program.psm
 CHAL_2_PORT_O          01           program.psm
 CHAL_3_PORT_O          02           program.psm
 CHAL_4_PORT_O          03           program.psm
 CHAL_5_PORT_O          04           program.psm
 CHAL_6_PORT_O          05           program.psm
 CHAL_7_PORT_O          06           program.psm
 CHAL_8_PORT_O          07           program.psm
 CHAL_9_PORT_O          08           program.psm
 CHAL_10_PORT_O         09           program.psm
 CHAL_11_PORT_O         0A           program.psm
 CHAL_12_PORT_O         0B           program.psm
 CHAL_13_PORT_O         0C           program.psm
 CHAL_14_PORT_O         0D           program.psm
 CHAL_15_PORT_O         0E           program.psm
 CHAL_16_PORT_O         0F           program.psm
 CHAL_EN_PORT_O         10           program.psm
 UART_Tx_PORT_O         11           program.psm
 PUF_START_PORT_O       12           program.psm
 UART_STATUS_PORT_I     00           program.psm
 UART_Rx_PORT_I         01           program.psm
 RESP_READY_PORT_I      02           program.psm
 RESP_1_PORT_I          03           program.psm
 RESP_2_PORT_I          04           program.psm
 RESP_3_PORT_I          05           program.psm
 RESP_4_PORT_I          06           program.psm
 RESP_5_PORT_I          07           program.psm
 RESP_6_PORT_I          08           program.psm
 RESP_7_PORT_I          09           program.psm
 RESP_8_PORT_I          0A           program.psm
 RESP_9_PORT_I          0B           program.psm
 RESP_10_PORT_I         0C           program.psm
 RESP_11_PORT_I         0D           program.psm
 RESP_12_PORT_I         0E           program.psm
 RESP_13_PORT_I         0F           program.psm
 RESP_14_PORT_I         10           program.psm
 RESP_15_PORT_I         11           program.psm
 RESP_16_PORT_I         12           program.psm
 CHAL_1                 00           program.psm
 CHAL_2                 01           program.psm
 CHAL_3                 02           program.psm
 CHAL_4                 03           program.psm
 CHAL_5                 04           program.psm
 CHAL_6                 05           program.psm
 CHAL_7                 06           program.psm
 CHAL_8                 07           program.psm
 CHAL_9                 08           program.psm
 CHAL_10                09           program.psm
 CHAL_11                0A           program.psm
 CHAL_12                0B           program.psm
 CHAL_13                0C           program.psm
 CHAL_14                0D           program.psm
 CHAL_15                0E           program.psm
 CHAL_16                0F           program.psm
 CHAR_C                 43           program.psm
 CHAR_V                 56           program.psm
 CHAR_B                 42           program.psm
 CHAR_R                 52           program.psm
 CHAR_S                 53           program.psm
 CHAR_Q                 51           program.psm
 CHAR_N                 4E           program.psm
 CHAR_A                 41           program.psm
 CHAR_Y                 59           program.psm
 CHAR_W                 57           program.psm
 CHAR_E                 45           program.psm
 CHAR_F                 46           program.psm
 character_a            61           program.psm
 character_b            62           program.psm
 character_c            63           program.psm
 character_d            64           program.psm
 character_e            65           program.psm
 character_f            66           program.psm
 character_g            67           program.psm
 character_h            68           program.psm
 character_i            69           program.psm
 character_j            6A           program.psm
 character_k            6B           program.psm
 character_l            6C           program.psm
 character_m            6D           program.psm
 character_n            6E           program.psm
 character_o            6F           program.psm
 character_p            70           program.psm
 character_q            71           program.psm
 character_r            72           program.psm
 character_s            73           program.psm
 character_t            74           program.psm
 character_u            75           program.psm
 character_v            76           program.psm
 character_w            77           program.psm
 character_x            78           program.psm
 character_y            79           program.psm
 character_z            7A           program.psm
 character_A            41           program.psm
 character_B            42           program.psm
 character_C            43           program.psm
 character_D            44           program.psm
 character_E            45           program.psm
 character_F            46           program.psm
 character_G            47           program.psm
 character_H            48           program.psm
 character_I            49           program.psm
 character_J            4A           program.psm
 character_K            4B           program.psm
 character_L            4C           program.psm
 character_M            4D           program.psm
 character_N            4E           program.psm
 character_O            4F           program.psm
 character_P            50           program.psm
 character_Q            51           program.psm
 character_R            52           program.psm
 character_S            53           program.psm
 character_T            54           program.psm
 character_U            55           program.psm
 character_V            56           program.psm
 character_W            57           program.psm
 character_X            58           program.psm
 character_Y            59           program.psm
 character_Z            5A           program.psm
 character_0            30           program.psm
 character_1            31           program.psm
 character_2            32           program.psm
 character_3            33           program.psm
 character_4            34           program.psm
 character_5            35           program.psm
 character_6            36           program.psm
 character_7            37           program.psm
 character_8            38           program.psm
 character_9            39           program.psm
 character_colon        3A           program.psm
 character_semi_colon   3B           program.psm
 character_less_than    3C           program.psm
 character_greater_than 3E           program.psm
 character_equals       3D           program.psm
 character_space        20           program.psm
 character_CR           0D           program.psm
 character_question     3F           program.psm
 character_dollar       24           program.psm
 character_BS           08           program.psm



No TABLEs defined



List of text strings

 STRING name       String         Source PSM File

 KCPSM6_version$   "v2.70"        
 datestamp$        "31 Dec 2014"  
 timestamp$        "13:03:00"     



List of line labels

   Label               Addr  Source PSM File

 * START               000   program.psm
 * welcome_to_pico     000   program.psm
   COMMAND_Loop        00A   program.psm
   send_reply          019   program.psm
   read_character      01C   program.psm
   write_character     021   program.psm
   read_challenge      026   program.psm
   send_challenge      047   program.psm
   evaluate_PUF        06A   program.psm
   check_resp_status   093   program.psm
   send_response       099   program.psm
   delay               0A1   program.psm
 * test_v_msg          0A6   program.psm

      * Line label has not been referenced in any instructions.
        Hint - This may indicate unused code that could be
               removed to reduce the size of this program.



Instruction usage statistics

 Instruction    Instances

 LOAD             20
 STAR              -

 AND               -
 OR                -
 XOR               -

 ADD               -
 ADDCY             -
 SUB               1
 SUBCY             -

 TEST              3
 TESTCY            -
 COMPARE           7
 COMPARECY         -

 SL0               -
 SL1               -
 SLX               -
 SLA               -
 RL                -
 SR0               -
 SR1               -
 SRX               -
 SRA               -
 RR                -

 REGBANK           -

 INPUT             7
 OUTPUT           19
 OUTPUTK           -

 STORE            32
 FETCH            32

 DISABLE           -
 ENABLE            -
 RETURNI           -

 JUMP             17
 JUMP@             -
 CALL             49
 CALL@             -
 RETURN            4
 LOAD&RETURN       -

 HWBUILD           -



End of KCPSM6 log file.
